//////////////////////////////////////////////////////////////
#include<stdio.h>
#include<string.h>
#include<assert.h>
//旋转字符串(左旋)-暴力旋转
//void left_move(char*arr,int k)
//{
//	int i = 0;
//	int len = strlen(arr);
//	assert(arr);
//	for(i = 0;i <k;i++)
//	{
//		char tmp = *arr;
//		int j = 0;
//		for(j = 0;j <len-1;j++)
//		{
//			*(arr+j) = *(arr+j+1);
//		}
//		*(arr+len-1) = tmp;
//	}
//}
//三步旋转法
//ab cdef ->  ba fedc  ->  cdef ab
void reverse(char* left , char* right)
{
	assert(left != NULL);
	assert(right != NULL);
	while(left < right)
	{
		char tmp = *left;
		*left = *right;
		*right = tmp;
		left++;
		right--;
	}
}

void left_move(char* arr,int k)
{
	int len = strlen(arr);
	assert(arr);
	assert(k<=len);
	reverse(arr,arr+k-1);//逆序左边
	reverse(arr+k,arr+len-1);//逆序右边
	reverse(arr,arr+len-1);//逆序整体
}
int main()
{
	char arr[] = "abcdef";
	left_move(arr,2);
	printf("%s\n",arr);
	return 0;
}

///////////////////////////////////////////////////////////
#include<stdio.h>
int check_sys()
{
	int a = 1;
	return *(char*)&a ;
	//返回1，小端
	//返回0，大端
}
int main()
{
	//写一段代码告诉我们当前机器的字节序是什么
	int ret = 0;
	ret = check_sys();
	if(ret == 1)
	{
		printf("小端\n");
	}
	else
	{
		printf("大端\n");
	}
	return 0;
}


//////////////////////////////////////////////////////////
//逆序字符串
int my_strlen(char* arr)
{
	int count = 0;
	while(*arr != '\0')
	{
		count++;
		arr++;
	}
	return count;
}

void reverse_string(char arr[])  //递归的方式
{
	char tmp = arr[0];
	int len = my_strlen(arr);
	arr[0] = arr[len - 1];
	arr[len - 1] = '\0';
	if(my_strlen(arr+1) >=2)
	{
	reverse_string(arr+1);
	}
	arr[len - 1] = tmp;
}

int main()
{
	char arr[] = "abcdef";
	reverse_string(arr);
	printf("%s\n",arr);
	return 0;
}

/////////////////////////////////////////////////////////////////////////
#include<stdio.h>
#include<assert.h>
//自建strlen()函数
int my_strlen(const char *str)
{
	int count = 0;
	assert(str !=NULL);//保证指针的有效性
	while(*str !='\0')
	{
		count++;
		str++;
	}
	return count;
}


int main()
{
	char arr[] = "abcdef";
	int len = my_strlen(arr);
	printf("%d\n",len);
	return 0;
}
//////////////////////////////////////////////////////////////////


#include<stdio.h>
//打印一个数二进制中1的个数（高效）
int count_bit_one(int n)
{
	int count = 0;
	while(n)
	{
		n = n&(n-1);
		count++;
	}
	return count;
}

//n = n&(n-1)
//n
//13
//1101	n
//1100	n-1
//1100	n
//1011	n-1
//1000	n
//0111	n-1
//0000	n           到0之前循环多少次它的二进制里面就有多少个1

int main()
{
	int count;
	int a = 0;
	scanf("%d",&a);
	count = count_bit_one();
	return 0;
}
